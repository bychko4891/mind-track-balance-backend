services:

#  auth-server:
#    container_name: auth-server
#    build:
#      context: ./auth
#    restart: unless-stopped
#    environment:
#      - DB_URL=jdbc:postgresql://postgres:5432/${DB_DATABASE_AUTH}
#      - DB_USERNAME=${DB_USER_AUTH}
#      - DB_PASSWORD=${DB_PASSWORD_AUTH}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - JWT_SECRET=${JWT_SECRET}
#      - JWT_ACCESS_EXPIRATION=${JWT_ACCESS_EXPIRATION}
#      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
#      - REDIS_URL=redis://redis:6379
#    depends_on:
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#      postgres:
#          condition: service_started
#      redis:
#        condition: service_started
#    networks:
#      - cloud-network

#  gateway-server:
#    container_name: gateway-server
#    build:
#      context: ./api-gateway
#    restart: unless-stopped
#    env_file:
#      - .env.dev
#    environment:
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#    healthcheck:
#      test: curl --fail http://localhost:8080/management || exit 1
#      interval: 10s
#      timeout: 2s
#      retries: 5
#    ports:
#      - "8080:8080"
#    networks:
#      - cloud-network
#
#  classroom-service:
#    container_name: classroom-service
#    build:
#      context: ./classroom
#    restart: unless-stopped
#    env_file:
#      - .env.dev
#    environment:
#      - DB_URL=jdbc:postgresql://postgres:5432/${DB_DATABASE_CLASSROOM}
#      - DB_USERNAME=${DB_USER_CLASSROOM}
#      - DB_PASSWORD=${DB_PASSWORD_CLASSROOM}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - MINIO_URL=http://minio-1:9001
#      - MINIO_BUCKET=${PRODUCT_SERVICE_MINIO_BUCKET}
#      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
#      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
#      - URL_AUTH_SERVER=${URL_AUTH_SERVER}
#    depends_on:
#      postgres:
#        condition: service_healthy
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#      auth-server:
#        condition: service_healthy
#    networks:
#      - cloud-network
#
#
#  inventory-service:
#    container_name: inventory-service
#    build:
#      context: ./inventory
#    restart: unless-stopped
#    env_file:
#      - .env.dev
#    environment:
#      - DB_URL=jdbc:postgresql://localhost:5432/${DB_DATABASE_OTHER}
#      - DB_USERNAME=${DB_USERNAME}
#      - DB_PASSWORD=${DB_PASSWORD}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - URL_AUTH_SERVER=${URL_AUTH_SERVER}
#    depends_on:
#      postgres:
#        condition: service_healthy
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#    networks:
#      - cloud-network
#
#  notification-service:
#    container_name: notification-service
#    build:
#      context: ./notification
#    restart: unless-stopped
#    environment:
#      - DB_URL=jdbc:postgresql://postgres:5432/${DB_DATABASE_NOTIFICATION}
#      - DB_USERNAME=${DB_USER_NOTIFICATION}
#      - DB_PASSWORD=${DB_PASSWORD_NOTIFICATION}
#      - MAIL_HOST=${MAIL_HOST}
#      - MAIL_PORT=${MAIL_PORT}
#      - MAIL_USERNAME=${MAIL_USERNAME}
#      - MAIL_PASSWORD=${MAIL_PASSWORD}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - URL_AUTH_SERVER=${URL_AUTH_SERVER}
#    depends_on:
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#      auth-server:
#        condition: service_healthy
#    networks:
#      - cloud-network
#
#  user-details-service:
#    container_name: user-details-service
#    build:
#      context: ./user-details
#    restart: unless-stopped
#    environment:
#      - DB_URL=jdbc:postgresql://postgres:5432/${DB_DATABASE_USER}
#      - DB_USERNAME=${DB_USER_USER}
#      - DB_PASSWORD=${DB_PASSWORD_USER}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - URL_AUTH_SERVER=${URL_AUTH_SERVER}
#    depends_on:
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#      auth-server:
#        condition: service_healthy
#    networks:
#      - cloud-network
#
#  info-service:
#    container_name: info-service
#    build:
#      context: ./info
#    restart: unless-stopped
#    env_file:
#      - .env.dev
#    environment:
#      - DB_URL=jdbc:postgresql://localhost:5432/${DB_DATABASE_OTHER}
#      - DB_USERNAME=${DB_USERNAME}
#      - DB_PASSWORD=${DB_PASSWORD}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - URL_AUTH_SERVER=${URL_AUTH_SERVER}
#    depends_on:
#      postgres:
#        condition: service_healthy
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#    networks:
#      - cloud-network
#
#  order-service:
#    container_name: order-service
#    build:
#      context: ./order
#    restart: unless-stopped
#    environment:
#      - DB_URL=jdbc:postgresql://localhost:5432/${DB_DATABASE_OTHER}
#      - DB_USERNAME=${DB_USERNAME}
#      - DB_PASSWORD=${DB_PASSWORD}
#      - EUREKA_USERNAME=${EUREKA_USERNAME}
#      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
#      - URL_AUTH_SERVER=${URL_AUTH_SERVER}
#    depends_on:
#      config-server:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#      auth-server:
#        condition: service_healthy
#      inventory-service:
#        condition: service_healthy
#      user-details-service:
#        condition: service_healthy
#    networks:
#      - cloud-network

#  redis:
#    image: redis:7.2.4-alpine
#    container_name: redis
#    restart: unless-stopped
#    ports:
#      - '6379:6379'
#    environment:
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
#    command: redis-server --save 60 1 --loglevel warning
##    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
#    networks:
#      - cloud-network
#    volumes:
#      - cache:/data

#  minio:
#    image: minio/minio:RELEASE.2024-04-06T05-26-02Z.fips
#    restart: unless-stopped
#    ports:
#      - '9091:9090'
#      - '9001:9000'
#    command: server ~/minio --console-address :9090
#    environment:
#      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
#      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
#    networks:
#      - cloud-network
#    volumes:
#      - minio_data:/data



  postgres:
    container_name: postgres
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MULTIPLE_DATABASES: auth,lessons,public,users,notification,media
      POSTGRES_USERNAME_AUTH: ${DB_USERNAME_AUTH}
      POSTGRES_PASSWORD_AUTH: ${DB_PASSWORD_AUTH}
      POSTGRES_USERNAME_LESSON: ${DB_USERNAME_LESSON}
      POSTGRES_PASSWORD_LESSON: ${DB_PASSWORD_LESSON}
      POSTGRES_USERNAME_PUBLIC: ${DB_USERNAME_PUBLIC}
      POSTGRES_PASSWORD_PUBLIC: ${DB_PASSWORD_PUBLIC}
      POSTGRES_USERNAME_USER: ${DB_USERNAME_USER}
      POSTGRES_PASSWORD_USER: ${DB_PASSWORD_USER}
      POSTGRES_USERNAME_NOTIFICATION: ${DB_USERNAME_NOTIFICATION}
      POSTGRES_PASSWORD_NOTIFICATION: ${DB_PASSWORD_NOTIFICATION}
      POSTGRES_USERNAME_MEDIA: ${DB_USERNAME_MEDIA}
      POSTGRES_PASSWORD_MEDIA: ${DB_PASSWORD_MEDIA}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - cloud-network


networks:
  cloud-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
#  minio_data:
#    driver: local
  cache:
    driver: local